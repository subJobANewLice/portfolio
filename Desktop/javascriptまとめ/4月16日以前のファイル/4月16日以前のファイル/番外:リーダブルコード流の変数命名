[原則]
・明確な単語を選ぶ
・汎用的な名前を避ける(あるいは、使う状況を選ぶ)
・抽象的な名前よりも具体的な名前を使う
・接尾辞や接頭辞を使って情報を追加する
・名前の長さを決める
・名前のフォーマットで情報を伝える
・関数なら「動詞+名詞」で付ける。動詞2つ以上はNG。
・classは「a-a」のようにハイフンで、idは「a_a」のようにアンダーバーで劃る
・変数名に大切な情報を追加する
・全部大文字は出来る限り使わない(定数などであっても)

[現場の場合は]
・複数取得か単数取得かで複数形と単数形を分ける
・スネークケースは避ける

[良い例(関数)]
・FetchPage()
・DownloadPage()
・Height()
・NumNodes()
・MemoryBytes()
・Kill()(取り返しのつかない処理に)
・Pause()(後から取り戻せるなら)
・sum_squares()(二乗の合計)
・user_info()(一時保管に)
・CanListenOnPort()(TCP/IPをリッスン出来るかどうか)

[良い例(変数と定数)]
・club_i
・members_i
・users_i
・clubs[ci]
・members[mi]
・users[ui]
・hex_id
・start_ms(ミリ秒スタートを表す)

[悪い例]
・get(何も伝わってこない。どこから取ってくるんですか？)

・size(何を返すんですか？)

・Stop(少し分かりづらいです)

・tmp(空虚です)

・retval(空虚です)

・foo(空虚です)

・iとjとk(短すぎて分かりづらい)